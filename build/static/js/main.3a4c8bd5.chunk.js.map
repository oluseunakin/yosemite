{"version":3,"sources":["Component/Pokemon.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Pokemon","pokemon","team","addTeammate","oldTeam","inTeam","_","has","name","useState","render","setRender","spacing","fontSize","fontWeight","size","onClick","abilities","map","ability","is_hidden","moves","move","localStorage","setItem","navigator","userAgent","JSON","stringify","t","te","unset","values","length","addToTeam","App","useMediaQuery","large","search","setSearch","getItem","parse","api","content","setContent","useEffect","fetch","then","response","json","r","results","forEach","poke","i","url","c","concat","direction","p","columns","md","sm","mb","placeholder","value","onChange","e","target","a","isEmpty","style","textAlign","h","orientation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2TA0FeA,MAtFf,YAA0D,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,QAEvCC,EAASC,IAAEC,IAAIL,EAAMD,EAAQO,MAFoB,EAqB3BC,mBAAS,IArBkB,mBAqBhDC,EArBgD,KAqBxCC,EArBwC,KAuBvD,OACE,eAAC,IAAD,CAAQC,QAAQ,IAAhB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMC,SAAS,MAAMC,WAAW,WAAhC,SACGb,EAAQO,SAGb,eAAC,IAAD,WACE,cAAC,IAAD,CACEO,KAAK,KACLC,QAAS,kBACPL,EACE,qCACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAME,SAAS,MAAf,+CAGDZ,EAAQgB,UAAUC,KAAI,SAACC,GAAD,OACrB,qCACE,cAAC,IAAD,CAAMN,SAAS,KAAf,SAAqBM,EAAQA,QAAQX,OACrC,eAAC,IAAD,8BACmBW,EAAQC,UAAY,GAAK,MAD5C,wBAZZ,0BAuBA,cAAC,IAAD,CACEL,KAAK,KACLC,QAAS,kBACPL,EACE,eAAC,IAAD,WACE,cAAC,IAAD,wCACCV,EAAQoB,MAAMH,KAAI,SAACI,GAAD,OACjB,cAAC,IAAD,CAAMT,SAAS,KAAf,SAAqBS,EAAKA,KAAKd,eAPzC,sBAeA,cAAC,IAAD,CACEO,KAAK,KACLC,QAAS,kBACPO,aAAaC,QACXC,UAAUC,UACVC,KAAKC,UAAUvB,GA9DHwB,EA8D0B5B,EAAQO,KA7DxDL,GAAY,SAAC2B,GAEX,OADAxB,IAAEyB,MAAMD,EAAID,GACLC,YAEF1B,EAAQyB,GACRzB,GAdT,SAAmByB,GACjB,OAAIvB,IAAE0B,OAAO9B,GAAM+B,OAAS,GAC1B9B,EAAY,2BAAKD,GAAN,kBAAa2B,EAAErB,KAAOqB,KACjCzB,EAAQyB,EAAErB,MAAQqB,EACXzB,GACMF,EAiEiDgC,CAAUjC,KA9D5E,IAAwB4B,GAyDlB,SASGxB,EAAS,SAAW,WAGxBK,MCuBQyB,MAzFf,WAAgB,IAAD,EACGC,YAAc,sBAAvBC,EADM,sBAEe5B,mBAAS,IAFxB,mBAEN6B,EAFM,KAEEC,EAFF,KAGTnC,EAAUmB,aAAaiB,QAAQf,UAAUC,WACzCC,KAAKc,MAAMlB,aAAaiB,QAAQf,UAAUC,YAC1C,GACEgB,EAAM,qCANC,EAOiBjC,mBAAS,IAP1B,mBAONkC,EAPM,KAOGC,EAPH,OAQenC,mBAASL,GARxB,mBAQNF,EARM,KAQAC,EARA,KAwBb,OAdA0C,qBAAU,WACRC,MAAMJ,GAAKK,MAAK,SAACC,GACfA,EAASC,OAAOF,MAAK,SAACG,GACpBA,EAAEC,QAAQC,SAAQ,SAACC,EAAMC,GACvBR,MAAMO,EAAKE,KAAKR,MAAK,SAACC,GAAD,OACnBA,EACGC,OACAF,MAAK,SAAC9C,GAAD,OAAa2C,GAAW,SAACY,GAAD,OAAOA,EAAEC,OAAOxD,uBAKvD,IAGD,cAAC,IAAD,UACE,eAAC,IAAD,CAAMyD,UAAU,SAASC,EAAE,KAA3B,UACE,eAAC,IAAD,CAAYC,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKC,GAAG,KAA1C,UACE,cAAC,IAAD,UACE,cAAC,IAAD,6BAEF,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,YAAY,qBACZC,MAAO3B,EACP4B,SAAU,SAACC,GAAD,OAAO5B,EAAU4B,EAAEC,OAAOH,UAEtC,cAAC,IAAD,CACEjD,QAAO,sBAAE,4BAAAqD,EAAA,sEACuBvB,MAAM,GAAD,OAAIJ,GAAJ,OAAUJ,IADtC,8BACiDW,OADjD,OACDD,EADC,OAEPJ,GAAW,SAAAY,GAAC,MAAI,GAAGC,OAAOT,MAFnB,2CADX,0BAUJ,eAAC,IAAD,CAAYY,QAAS,CAAEC,GAAI,EAAGC,GAAI,GAAKlD,QAAQ,IAA/C,UACE,cAAC,IAAD,UACIN,IAAEgE,QAAQpE,GAeV,cAAC,IAAD,UACE,cAAC,IAAD,0DAfF,qCACE,cAAC,IAAD,CAAMW,SAAS,MAAM0D,MAAO,CAACC,UAAY,UAAzC,sBACClE,IAAE0B,OAAO9B,GAAMgB,KAAI,SAACW,EAAGyB,GACtB,OACA,cAAC,EAAD,CAEErD,QAAS4B,EACT3B,KAAMA,EACNC,YAAaA,EACbC,QAASA,GAJJkD,WAcdjB,EAAM,cAAC,IAAD,CAAQoC,EAAE,QAAV,SAAkB,cAAC,IAAD,CAASC,YAAY,eAAwB,cAAC,IAAD,IAEtE,eAAC,IAAD,WACE,cAAC,IAAD,CAAM7D,SAAS,MAAM0D,MAAO,CAACC,UAAY,UAAzC,uBACC7B,EAAQzB,KAAI,SAACsC,EAAGF,GAAJ,OACX,cAAC,EAAD,CAEErD,QAASuD,EACTrD,YAAaA,EACbD,KAAMA,EACNE,QAASA,GAJJkD,kBClFNqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCKMO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAS9E,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEF+E,SAASC,eAAe,SDuHpB,kBAAmBjE,WACrBA,UAAUkE,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YClH5BvB,M","file":"static/js/main.3a4c8bd5.chunk.js","sourcesContent":["import { Button, Center, HStack, Text, Box, VStack } from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nfunction Pokemon({ pokemon, team, addTeammate, oldTeam}) {\r\n\r\n  const inTeam = _.has(team, pokemon.name)\r\n\r\n  function addToTeam(t) {\r\n    if (_.values(team).length < 6) {\r\n      addTeammate({ ...team, [t.name]: t });\r\n      oldTeam[t.name] = t;\r\n      return oldTeam;\r\n    }else { return team }\r\n  }\r\n\r\n  function removeFromTeam(t) {\r\n    addTeammate((te) => {\r\n      _.unset(te, t)\r\n      return te;\r\n    });\r\n    delete oldTeam[t];\r\n    return oldTeam;\r\n  }\r\n\r\n  const [render, setRender] = useState(\"\");\r\n\r\n  return (\r\n    <VStack spacing=\"5\">\r\n      <Center>\r\n        <Text fontSize=\"4xl\" fontWeight=\"semibold\">\r\n          {pokemon.name}\r\n        </Text>\r\n      </Center>\r\n      <HStack>\r\n        <Button\r\n          size=\"sm\"\r\n          onClick={() =>\r\n            setRender(\r\n              <>\r\n                <Center>\r\n                  <Text fontSize=\"2xl\">---------- Abilities ----------</Text>\r\n                </Center>\r\n\r\n                {pokemon.abilities.map((ability) => (\r\n                  <>\r\n                    <Text fontSize=\"xl\">{ability.ability.name}</Text>\r\n                    <Text>\r\n                      This ability is {ability.is_hidden ? \"\" : \"not\"} hidden\r\n                    </Text>\r\n                  </>\r\n                ))}\r\n              </>\r\n            )\r\n          }\r\n        >\r\n          My Abilities\r\n        </Button>\r\n        <Button\r\n          size=\"sm\"\r\n          onClick={() =>\r\n            setRender(\r\n              <Box>\r\n                <Text>----------Moves----------</Text>\r\n                {pokemon.moves.map((move) => (\r\n                  <Text fontSize=\"xl\">{move.move.name}</Text>\r\n                ))}\r\n              </Box>\r\n            )\r\n          }\r\n        >\r\n          My Moves\r\n        </Button>\r\n        <Button\r\n          size=\"sm\"\r\n          onClick={() =>\r\n            localStorage.setItem(\r\n              navigator.userAgent,\r\n              JSON.stringify(inTeam? removeFromTeam(pokemon.name) : addToTeam(pokemon))\r\n            )\r\n          }\r\n        >\r\n          {inTeam ? \"Remove\" : \"Add\"}\r\n        </Button>\r\n      </HStack>\r\n      {render}\r\n    </VStack>\r\n  );\r\n}\r\n\r\nexport default Pokemon;\r\n","import {\n  ChakraProvider,\n  SimpleGrid,\n  Text,\n  Center,\n  Flex,\n  Input,\n  Heading,\n  Container,\n  Button,\n  HStack,\n  VStack,\n  Divider,\n  useMediaQuery,\n} from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\nimport Pokemon from \"./Component/Pokemon\";\nimport _ from \"lodash\";\n\nfunction App() {\n  const [large] = useMediaQuery(\"(min-width: 768px)\")\n  const [search, setSearch] = useState(\"\");\n  let oldTeam = localStorage.getItem(navigator.userAgent)\n    ? JSON.parse(localStorage.getItem(navigator.userAgent))\n    : {};\n  const api = \"https://pokeapi.co/api/v2/pokemon/\";\n  const [content, setContent] = useState([]);\n  const [team, addTeammate] = useState(oldTeam);\n  \n  useEffect(() => {\n    fetch(api).then((response) => {\n      response.json().then((r) => {\n        r.results.forEach((poke, i) => {\n          fetch(poke.url).then((response) =>\n            response\n              .json()\n              .then((pokemon) => setContent((c) => c.concat(pokemon)))\n          );\n        });\n      });\n    });\n  }, []);\n\n  return (\n    <ChakraProvider>\n      <Flex direction=\"column\" p=\"10\">\n        <SimpleGrid columns={{ md: 2, sm: 1 }} mb=\"70\">\n          <Center>\n            <Heading>Welcome Hero</Heading>\n          </Center>\n          <HStack>\n            <Input\n              placeholder=\"Search for Pokemon\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n            />\n            <Button\n              onClick={async () => {\n                const response = await (await fetch(`${api}${search}`)).json();\n                setContent(c => [].concat(response));\n              }}\n            >\n              Search\n            </Button>\n          </HStack>\n        </SimpleGrid>\n        <SimpleGrid columns={{ md: 3, sm: 1 }} spacing=\"5\">\n          <Container>\n            {!_.isEmpty(team) ? (\n              <>\n                <Text fontSize=\"4xl\" style={{textAlign : 'center'}}> My Team</Text>\n                {_.values(team).map((t, i) => {\n                  return (\n                  <Pokemon\n                    key={i}\n                    pokemon={t}\n                    team={team}\n                    addTeammate={addTeammate}\n                    oldTeam={oldTeam}\n                  />\n                )})}\n              </>\n            ) : (\n              <Center>\n                <Text>You don't have any pokemon in your team. </Text>\n              </Center>\n            )}\n          </Container>\n          {large?<Center h='400px'><Divider orientation='vertical'/></Center> : <Divider />}\n          \n          <VStack>\n            <Text fontSize=\"4xl\" style={{textAlign : 'center'}}> Pokemons</Text>\n            {content.map((c, i) => (\n              <Pokemon\n                key={i}\n                pokemon={c}\n                addTeammate={addTeammate}\n                team={team}\n                oldTeam={oldTeam}\n              />\n            ))}\n          </VStack>\n        </SimpleGrid>\n      </Flex>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}